# import plotly.plotly as py  # импорт для онлайна
import plotly.offline as offline  # импорт для оффлайна
from plotly.graph_objs import *  # импорт всех граф объекты
import plotly.express as px
# offline.init_notebook_mode()  # для использования в ноутбуке

import numpy as np
import pandas as pd

# offline.plot([{
#     'x': x,
#     'y': f(x),
# }])

import plotly
import plotly.graph_objs as go
from plotly.subplots import make_subplots

import numpy as np
import pandas as pd
x = np.arange(0, 150, 1)

def f(x):
    return x**2
def h(x):
    return np.sin(x)
def g(x):
    return np.cos(x)
def j(x):
    return np.tan(x)


def t(x):
    return 0.5 * x


fig = go.Figure()  # создание поля для графика
fig = make_subplots(rows=3, cols=2, subplot_titles=('Plot1', 'Plot2', 'Plot3', 'Plot4'),
                    specs=[[{'rowspan': 3}, {}], [None, {}], [None, {}]])
# column_widths=[2, 1] задание отношения между графиками по строке, row_heights= столбцы
# specs=[[{"colspan": 2}, None], [{}, {}]]) для объединения по строке
fig.update_yaxes(range=[-0.5, 5], zeroline=True, zerolinewidth=2, zerolinecolor='LightPink',
                 col=2)  # область показа по y, причем изменяем у второго графика
fig.update_xaxes(range=[-0.5, 5], zeroline=True, zerolinewidth=2, zerolinecolor='#000',
                 col=2)  # область показа по x, аналогично

fig.add_trace(go.Scatter(x=x, y=f(x), name='f(x)=x<sup>2</sup>', mode='lines+markers'), 1, 2)
fig.add_trace(go.Scatter(x=x, y=t(x), name='f(x)=0.5x', mode='lines+markers',
                         marker=dict(color=x, colorbar=dict(title='f(x)=x'),
                                     colorscale='Inferno', size=10*t(x))), 2, 2)
fig.add_trace(go.Scatter(x=x, y=x, name='g(x)=x', mode='markers',
                         marker=dict(color='LightSkyBlue', size=10, line=dict(color='MediumPurple', width=2))), 1, 2)
fig.add_trace(go.Scatter(x=x, y=h(x), name='h(x)=sin(x)'), 3, 2)
fig.add_trace(go.Scatter(x=x, y=g(x), name='g(x)=cos(x)'), 3, 2)
# fig.add_trace(go.Scatter(visible='legendonly', x=x, y=j(x), name='j(x)=tg(x)'))  # неактивна функция, скрыта
fig.add_trace(go.Scatter(x=x, y=j(x), name='j(x)=tg(x)'), 1, 1)

fig.update_layout(legend_orientation="h",  # внизу располагается легенда
                  legend=dict(x=.5, xanchor="center"),  # выравнивание легенды (по центру)
                  margin=dict(l=0, r=0, t=60, b=0),  # настройка полей вокруг графика, сверху 30px
                  # title='Grafic',  # общее название графика
                  # xaxis_title='x Axis Title',  # подпись оси x
                  # yaxis_title='y Axis Title',  # подпись оси y
                  width=600,  # ширина
                  height=1000,  # высота
                  hovermode='x')  # при наведении на один график, данные отображаются и по второму (по иксу)
fig.update_layout(title='Plot Title')  # общее название графиков
fig.update_xaxes(title='Ось Х графика 1', col=1, row=1)  # подписывание осей
fig.update_xaxes(title='Ось Х графика 2', col=2, row=1)
fig.update_yaxes(title='Ось Y графика 1', col=1, row=1)
fig.update_yaxes(title='Ось Y графика 2', col=2, row=1)
fig.update_traces(hoverinfo='all', hovertemplate='Аргумент: %{x}<br>Функция: %{y}')
offline.plot(fig)


fig5 = px.line(module_statistics_group_count,
               x=module_statistics_group_count['mean'].values,
               y=module_statistics_group_count.index.get_level_values(1),
               facet_col=module_statistics_group_count.index.get_level_values(0),
               facet_col_wrap=1,
               labels=dict(x='Длительность', color='Курс', facet_col='Курс'),
               color=module_statistics_group_count.index.get_level_values(0),
               facet_row_spacing=0.025)  # расстояние между графиками по вертикали
fig5.update_layout(title=dict(text='<b>Медианное время прохождения каждого модуля</b>', x=.5, xanchor="center"),  # название графика
                   showlegend=False,
                   height=2200,
                   margin=dict(l=30, r=10, t=50, b=10))
fig5.update_xaxes(fixedrange=True,  # размер графика по всей подложке
                  tickfont_size=9,  # размер тиков
                  showticklabels=True,  # показать все тики для express
                  ticksuffix=' дн.',  # суффикс у тиков оси
                  title=dict(text='Время выполнения',  # подпись оси х
                             font=dict(size=10),  # размер шрифта
                             standoff=1),  # расстояние до графика
                  nticks=6,  # количество тиков
                  tickangle=45,  # угол наклона тиков
                  tickformat='% H ~% M ~% S.% 2f')  # «2016-10-13 09: 15: 23.456» ---> «09 ~ 15 ~ 23.46»
fig5.update_yaxes(fixedrange=True,
                  tickfont_size=9,
                  side='right',  # сторона отображения тиков
                  title=dict(text='Модули',  # подпись оси у
                             font=dict(size=10)))  # размер шрифта
fig5.update_traces(hovertemplate='<b>%{y}</b><br>Курс: %{facet_row}<br>Время выполнения: %{x}<extra></extra>')
